------- FILE bomber.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      4  10000 ????						;; Include VCS register memory and macros
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE bomber.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????						;-------------------------------------------------------
    163  0000 ????						; SKIP_SCANLINES #lines
    164  0000 ????						;
    165  0000 ????						; Skip a given # of scanlines.
    166  0000 ????						; Sets the X register to zero.
    167  0000 ????
    168  0000 ????				      MAC	skip_scanlines
    169  0000 ????			   .LINES     SET	{1}
    170  0000 ????				      ldx	#.LINES
    171  0000 ????			   .vblank    sta	WSYNC
    172  0000 ????				      dex
    173  0000 ????				      bne	.vblank
    174  0000 ????				      ENDM
    175  0000 ????
    176  0000 ????						; EOF
------- FILE bomber.asm
      8  0000 ????
      9  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  0000 ????						;; Variables declaration
     11  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     12 U0099 ????				      seg.u	Variables
     13 U0080					      org	$80
     14 U0080
     15 U0080		       00	   JetXPos    byte.b		; Player X position
     16 U0081		       00	   JetYPos    byte.b		; Player Y Position
     17 U0082		       00	   BomberXPos byte.b		; Enemy X Position
     18 U0083		       00	   BomberYPos byte.b		; Enemy Y Position
     19 U0084		       00	   Score      byte.b		; 2-digit score stored as BCD
     20 U0085		       00	   Timer      byte.b		; 2-digit score stored as BCD
     21 U0086		       00	   Temp       byte.b		; auxiliary variable to store temp score values
     22 U0087		       00 00	   OnesDigitOffset word.w		; lookup table offset for the 1's digit
     23 U0089		       00 00	   TensDigitOffset word.w		; lookup table offset for the 10's digit
     24 U008b		       00 00	   JetSpritePtr word.w		; pointer to player0 sprite lookup table
     25 U008d		       00 00	   JetColorPtr word.w		; pointer to player0 color lookup table
     26 U008f		       00 00	   BomberSpritePtr word.w		; pointer to player1 sprite lookup table
     27 U0091		       00 00	   BomberColorPtr word.w		; pointer to player1 color lookup table
     28 U0093		       00	   JetAnimOffset byte.b		; Player sprite frame offset for animation
     29 U0094		       00	   Random     byte.b		; random number generated to set enemy position
     30 U0095		       00	   ScoreSprite byte.b		; store the sprite bit pattern for the score
     31 U0096		       00	   TimerSprite byte.b		; store the sprite bit pattern for the timer
     32 U0097		       00	   TerrainColor byte.b		; store the color of the terrain
     33 U0098		       00	   RiverColor byte.b		; store the colore of the river
     34 U0099
     35 U0099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     36 U0099							;; Define constants
     37 U0099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     38 U0099		       00 09	   JET_HEIGHT =	9	; player0 sprite height (# rows in lookup table)
     39 U0099		       00 09	   BOMBER_HEIGHT =	9	; player1 sprite height (# rows in lookup table)
     40 U0099		       00 05	   DIGITS_HEIGHT =	5	; scoreboard digit hieght (# rows in lookup table)
     41 U0099
     42 U0099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     43 U0099							;; Code start
     44 U0099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     45  10000 ????				       seg	Code
     46  f000					      org	$F000
     47  f000
     48  f000				   Reset
      0  f000					      CLEAN_START		; Call macro to reset memory and registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     50  f00b
     51  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     52  f00b							;; Initialize RAM variables and TIA registers
     53  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     54  f00b		       a9 0a		      lda	#10
     55  f00d		       85 81		      sta	JetYPos
     56  f00f		       a9 5a		      lda	#90
     57  f011		       85 80		      sta	JetXPos
     58  f013		       a9 50		      lda	#80
     59  f015		       85 83		      sta	BomberYPos
     60  f017		       a9 3c		      lda	#60
     61  f019		       85 82		      sta	BomberXPos
     62  f01b		       a9 d4		      lda	#%11010100
     63  f01d		       85 94		      sta	Random
     64  f01f
     65  f01f		       a9 00		      lda	#0
     66  f021		       85 84		      sta	Score
     67  f023		       a9 00		      lda	#0
     68  f025		       85 85		      sta	Timer
     69  f027
     70  f027							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     71  f027							;; Initialize pointers to the correct lookup table addresses
     72  f027							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     73  f027		       a9 ed		      lda	#<JetSprite
     74  f029		       85 8b		      sta	JetSpritePtr	; lo-byte pointer for jet sprite lookup table
     75  f02b		       a9 f2		      lda	#>JetSprite
     76  f02d		       85 8c		      sta	JetSpritePtr+1	; hi-byte pointer for jet sprite lookup table
     77  f02f
     78  f02f		       a9 08		      lda	#<JetColor
     79  f031		       85 8d		      sta	JetColorPtr	; lo-byte pointer for jet color lookup table
     80  f033		       a9 f3		      lda	#>JetColor
     81  f035		       85 8e		      sta	JetColorPtr+1	; hi-byte pointer for jet color lookup table
     82  f037
     83  f037		       a9 ff		      lda	#<BomberSprite
     84  f039		       85 8f		      sta	BomberSpritePtr	; lo-byte pointer for enemy sprite lookup table
     85  f03b		       a9 f2		      lda	#>BomberSprite
     86  f03d		       85 90		      sta	BomberSpritePtr+1	; hi-byte pointer for enemy sprite lookup table
     87  f03f
     88  f03f		       a9 1a		      lda	#<BomberColor
     89  f041		       85 91		      sta	BomberColorPtr	; lo-byte pointer for enemy color lookup table
     90  f043		       a9 f3		      lda	#>BomberColor
     91  f045		       85 92		      sta	BomberColorPtr+1	; hi-byte pointer for enemy color lookup table
     92  f047
     93  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     94  f047							;; Start the main display loop and frame rendering
     95  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     96  f047				   StartFrame
     97  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     98  f047							;; Display VSYNC and VBLANK
     99  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    100  f047		       a9 02		      lda	#2
    101  f049		       85 01		      sta	VBLANK	; turn on VBLANK
    102  f04b		       85 00		      sta	VSYNC	; turn on VSYNC
    103  f04d					      REPEAT	3
    104  f04d		       85 02		      sta	WSYNC	; recommended lines of VSYNC
    103  f04d					      REPEND
    104  f04f		       85 02		      sta	WSYNC	; recommended lines of VSYNC
    103  f04f					      REPEND
    104  f051		       85 02		      sta	WSYNC	; recommended lines of VSYNC
    105  f053					      REPEND
    106  f053		       a9 00		      lda	#0
    107  f055		       85 00		      sta	VSYNC	; turn off VSYNC
    108  f057					      REPEAT	33
    109  f057		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f057					      REPEND
    109  f059		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f059					      REPEND
    109  f05b		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f05b					      REPEND
    109  f05d		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f05d					      REPEND
    109  f05f		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f05f					      REPEND
    109  f061		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f061					      REPEND
    109  f063		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f063					      REPEND
    109  f065		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f065					      REPEND
    109  f067		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f067					      REPEND
    109  f069		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f069					      REPEND
    109  f06b		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f06b					      REPEND
    109  f06d		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f06d					      REPEND
    109  f06f		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f06f					      REPEND
    109  f071		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f071					      REPEND
    109  f073		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f073					      REPEND
    109  f075		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f075					      REPEND
    109  f077		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f077					      REPEND
    109  f079		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f079					      REPEND
    109  f07b		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f07b					      REPEND
    109  f07d		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f07d					      REPEND
    109  f07f		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f07f					      REPEND
    109  f081		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f081					      REPEND
    109  f083		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f083					      REPEND
    109  f085		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f085					      REPEND
    109  f087		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f087					      REPEND
    109  f089		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f089					      REPEND
    109  f08b		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f08b					      REPEND
    109  f08d		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f08d					      REPEND
    109  f08f		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f08f					      REPEND
    109  f091		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f091					      REPEND
    109  f093		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f093					      REPEND
    109  f095		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    108  f095					      REPEND
    109  f097		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    110  f099					      REPEND
    111  f099
    112  f099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    113  f099							;; Calculations and task performed in the the VBlank
    114  f099							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    115  f099		       a5 80		      lda	JetXPos
    116  f09b		       a0 00		      ldy	#0
    117  f09d		       20 3f f2 	      jsr	SetObjectXPos	; set player0 horizontal position
    118  f0a0
    119  f0a0		       a5 82		      lda	BomberXPos
    120  f0a2		       a0 01		      ldy	#1
    121  f0a4		       20 3f f2 	      jsr	SetObjectXPos	; set bomber horizontal position
    122  f0a7
    123  f0a7		       20 7c f2 	      jsr	CalculateDigitOffset	; calculate the scoreboard digit lookup table offset
    124  f0aa
    125  f0aa							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    126  f0aa							;; Display the scoreboard
    127  f0aa							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    128  f0aa		       a9 00		      lda	#0	; clear TIA registers before each new frame
    129  f0ac		       85 0d		      sta	PF0
    130  f0ae		       85 0e		      sta	PF1
    131  f0b0		       85 0f		      sta	PF2
    132  f0b2		       85 1b		      sta	GRP0
    133  f0b4		       85 1c		      sta	GRP1
    134  f0b6		       85 0a		      sta	CTRLPF
    135  f0b8		       85 09		      sta	COLUBK
    136  f0ba
    137  f0ba		       a9 1e		      lda	#$1E
    138  f0bc		       85 08		      sta	COLUPF
    139  f0be
    140  f0be		       85 02		      sta	WSYNC
    141  f0c0		       85 2a		      sta	HMOVE	; apply the horizontal offsets previously set by the routine
    142  f0c2
    143  f0c2		       a9 00		      lda	#0
    144  f0c4		       85 01		      sta	VBLANK	; turn off VBLANK
    145  f0c6
    146  f0c6		       a2 05		      ldx	#DIGITS_HEIGHT
    147  f0c8				   .ScoreDigitLoop
    148  f0c8		       a4 89		      ldy	TensDigitOffset	; get the tens digit offset for the Score
    149  f0ca		       b9 9d f2 	      lda	Digits,Y	; load the bit pattern from lookup table + Y offset
    150  f0cd		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit from the A register
    151  f0cf		       85 95		      sta	ScoreSprite	; save the score tens digit pattern in a variable
    152  f0d1
    153  f0d1		       a4 87		      ldy	OnesDigitOffset
    154  f0d3		       b9 9d f2 	      lda	Digits,Y
    155  f0d6		       29 0f		      and	#$0F	; remove the graphics for the tens digit from the A register
    156  f0d8		       05 95		      ora	ScoreSprite	; merge it with the saved tens digit sprite
    157  f0da		       85 95		      sta	ScoreSprite	; and save it to ScoreSprite
    158  f0dc		       85 02		      sta	WSYNC
    159  f0de		       85 0e		      sta	PF1	; update the playfield to display the Score sprite
    160  f0e0
    161  f0e0		       a4 8a		      ldy	TensDigitOffset+1	; get the tens digit offset for the Score
    162  f0e2		       b9 9d f2 	      lda	Digits,Y	; load the bit pattern from lookup table + Y offset
    163  f0e5		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit from the A register
    164  f0e7		       85 96		      sta	TimerSprite	; save the score tens digit pattern in a variable
    165  f0e9
    166  f0e9		       a4 88		      ldy	OnesDigitOffset+1
    167  f0eb		       b9 9d f2 	      lda	Digits,Y
    168  f0ee		       29 0f		      and	#$0F	; remove the graphics for the tens digit from the A register
    169  f0f0		       05 96		      ora	TimerSprite	; merge it with the saved tens digit sprite
    170  f0f2		       85 96		      sta	TimerSprite	; and save it to ScoreSprite
    171  f0f4
    172  f0f4		       20 9c f2 	      jsr	Sleep12Cycles	; waste some cycles
    173  f0f7
    174  f0f7		       85 0e		      sta	PF1	; update the playfield for Timer display
    175  f0f9
    176  f0f9		       a4 95		      ldy	ScoreSprite	; preload for the next scanline
    177  f0fb		       85 02		      sta	WSYNC
    178  f0fd
    179  f0fd		       84 0e		      sty	PF1	; update playfield for the score display
    180  f0ff		       e6 89		      inc	TensDigitOffset
    181  f101		       e6 8a		      inc	TensDigitOffset+1
    182  f103		       e6 87		      inc	OnesDigitOffset
    183  f105		       e6 88		      inc	OnesDigitOffset+1	; increment all digits for the next line of data
    184  f107
    185  f107		       20 9c f2 	      jsr	Sleep12Cycles
    186  f10a
    187  f10a		       ca		      dex
    188  f10b		       85 0e		      sta	PF1	; update playfield for timer display
    189  f10d		       d0 b9		      bne	.ScoreDigitLoop
    190  f10f
    191  f10f		       85 02		      sta	WSYNC
    192  f111		       a9 00		      lda	#0
    193  f113		       85 0d		      sta	PF0
    194  f115		       85 0e		      sta	PF1
    195  f117		       85 0f		      sta	PF2
    196  f119		       85 02		      sta	WSYNC
    197  f11b		       85 02		      sta	WSYNC
    198  f11d		       85 02		      sta	WSYNC
    199  f11f
    200  f11f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    201  f11f							;; 96 visible scanlines for main game (because 2-line kernel)
    202  f11f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    203  f11f				   GameVisibleLine
    204  f11f		       a5 97		      lda	TerrainColor
    205  f121		       85 09		      sta	COLUBK	; set background color to terrain color
    206  f123		       a5 98		      lda	RiverColor
    207  f125		       85 08		      sta	COLUPF	; set playfield to river color
    208  f127		       a9 01		      lda	#1
    209  f129		       85 0a		      sta	CTRLPF	; enable playfield reflection
    210  f12b		       a9 f0		      lda	#$F0
    211  f12d		       85 0d		      sta	PF0	; setting PF0 bit pattern
    212  f12f		       a9 fc		      lda	#$FC
    213  f131		       85 0e		      sta	PF1
    214  f133		       a9 00		      lda	#0
    215  f135		       85 0f		      sta	PF2
    216  f137
    217  f137		       a2 53		      ldx	#83	; X counts the number of remaining scanlines
    218  f139				   .GameLineLoop		; . has no special meaning, tutor uses it to indicate that this segment is within the above segment
    219  f139				   .AreWeInsideJetSprite
    220  f139		       8a		      txa		; transfer X to A
    221  f13a		       38		      sec		; Set carry flag before subtraction
    222  f13b		       e5 81		      sbc	JetYPos	; subtract sprite Y-coordinate
    223  f13d		       c5 09		      cmp	JET_HEIGHT	; are we inside the sprite height
    224  f13f		       90 02		      bcc	.DrawJetSprite	; if result < SpriteHeight, call the draw routine
    225  f141		       a9 00		      lda	#0	; else, set lookup index to zero
    226  f143				   .DrawJetSprite
    227  f143		       18		      clc		; clear carry flag before addition
    228  f144		       65 93		      adc	JetAnimOffset	; offset animation to jump to correct frame 
    229  f146		       a8		      tay
    230  f147		       b1 8b		      lda	(JetSpritePtr),Y	; load player0 bitmap data from lookup table
    231  f149		       85 02		      sta	WSYNC
    232  f14b		       85 1b		      sta	GRP0	; set graphics for player0
    233  f14d		       b1 8d		      lda	(JetColorPtr),Y	; load player0 color data from lookup table
    234  f14f		       85 06		      sta	COLUP0	; set color of player0
    235  f151
    236  f151				   .AreWeInsideBomber
    237  f151		       8a		      txa		; transfer X to A
    238  f152		       38		      sec		; Set carry flag before subtraction
    239  f153		       e5 83		      sbc	BomberYPos	; subtract sprite Y-coordinate
    240  f155		       c5 09		      cmp	BOMBER_HEIGHT	; are we inside the sprite height
    241  f157		       90 02		      bcc	.DrawBomberSprite	; if result < SpriteHeight, call the draw routine
    242  f159		       a9 00		      lda	#0	; else, set lookup index to zero
    243  f15b				   .DrawBomberSprite
    244  f15b		       a8		      tay
    245  f15c		       a9 05		      lda	#%00000101
    246  f15e		       85 05		      sta	NUSIZ1	; stretch bomber sprite
    247  f160		       b1 8f		      lda	(BomberSpritePtr),Y	; load player0 bitmap data from lookup table
    248  f162		       85 02		      sta	WSYNC
    249  f164		       85 1c		      sta	GRP1	; set graphics for player1
    250  f166		       b1 91		      lda	(BomberColorPtr),Y	; load player0 color data from lookup table
    251  f168		       85 07		      sta	COLUP1	; set color of player1
    252  f16a
    253  f16a		       ca		      dex
    254  f16b		       d0 cc		      bne	.GameLineLoop
    255  f16d
    256  f16d		       a9 00		      lda	#0
    257  f16f		       85 93		      sta	JetAnimOffset	; always reset animation offset to 0
    258  f171
    259  f171		       85 02		      sta	WSYNC
    260  f173
    261  f173							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    262  f173							;; Process joystick input for player0
    263  f173							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    264  f173				   CheckP0Up
    265  f173		       a9 10		      lda	#%00010000	; player0 joystick up
    266  f175		       2c 80 02 	      bit	SWCHA
    267  f178		       d0 0c		      bne	CheckP0Down	; if bit pattern doesn't match, jump to next check
    268  f17a				   .checkUpPFLimit
    269  f17a		       a5 81		      lda	JetYPos
    270  f17c		       c9 4b		      cmp	#75
    271  f17e		       f0 06		      beq	CheckP0Down	; if JetYPos == 100, jump to next check
    272  f180		       e6 81		      inc	JetYPos
    273  f182		       a9 00		      lda	#0
    274  f184		       85 93		      sta	JetAnimOffset
    275  f186
    276  f186				   CheckP0Down
    277  f186		       a9 20		      lda	#%00100000	; player0 joystick up
    278  f188		       2c 80 02 	      bit	SWCHA
    279  f18b		       d0 0c		      bne	CheckP0Left	; if bit pattern doesn't match, jump to next 
    280  f18d				   .checkDownPFLimit
    281  f18d		       a5 81		      lda	JetYPos
    282  f18f		       c9 00		      cmp	#0
    283  f191		       f0 06		      beq	CheckP0Left
    284  f193		       c6 81		      dec	JetYPos
    285  f195		       a9 00		      lda	#0
    286  f197		       85 93		      sta	JetAnimOffset
    287  f199
    288  f199				   CheckP0Left
    289  f199		       a9 40		      lda	#%01000000	; player0 joystick up
    290  f19b		       2c 80 02 	      bit	SWCHA
    291  f19e		       d0 0c		      bne	CheckP0Right	; if bit pattern doesn't match, jump to next 
    292  f1a0				   .checkLeftPFLimit
    293  f1a0		       a5 80		      lda	JetXPos
    294  f1a2		       c9 23		      cmp	#35
    295  f1a4		       f0 06		      beq	CheckP0Right
    296  f1a6		       c6 80		      dec	JetXPos
    297  f1a8		       a5 09		      lda	JET_HEIGHT
    298  f1aa		       85 93		      sta	JetAnimOffset
    299  f1ac
    300  f1ac				   CheckP0Right
    301  f1ac		       a9 80		      lda	#%10000000	; player0 joystick up
    302  f1ae		       2c 80 02 	      bit	SWCHA
    303  f1b1		       d0 0c		      bne	EndInputCheck	; if bit pattern doesn't match, jump to
    304  f1b3				   .checkRightPFLimit
    305  f1b3		       a5 80		      lda	JetXPos
    306  f1b5		       c9 64		      cmp	#100
    307  f1b7		       f0 06		      beq	EndInputCheck
    308  f1b9		       e6 80		      inc	JetXPos
    309  f1bb		       a5 09		      lda	JET_HEIGHT
    310  f1bd		       85 93		      sta	JetAnimOffset
    311  f1bf
    312  f1bf				   EndInputCheck		; fallback when no input was performed
    313  f1bf
    314  f1bf							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    315  f1bf							;; Calculations to update position for next frame
    316  f1bf							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    317  f1bf				   UpdateBomberPosition
    318  f1bf		       a5 83		      lda	BomberYPos
    319  f1c1		       18		      clc
    320  f1c2		       c9 00		      cmp	#0
    321  f1c4		       30 05		      bmi	.ResetBomberPosition	; if < 0, reset y-position
    322  f1c6		       c6 83		      dec	BomberYPos	; else decrement y-position
    323  f1c8		       4c de f1 	      jmp	EndPositionUpdate	; jump to EndPositionUpdate to bypass reset
    324  f1cb				   .ResetBomberPosition
    325  f1cb		       20 5e f2 	      jsr	GetRandomBomberPos	; call subroutine for random x-position
    326  f1ce				   .SetScoreValues
    327  f1ce		       f8		      sed		; enable BCD(decimal) mode
    328  f1cf
    329  f1cf		       a5 84		      lda	Score
    330  f1d1		       18		      clc
    331  f1d2		       69 01		      adc	#1
    332  f1d4		       85 84		      sta	Score	; add 1 to score (BCD does not like INC instruction)
    333  f1d6
    334  f1d6		       a5 85		      lda	Timer
    335  f1d8		       18		      clc
    336  f1d9		       69 01		      adc	#1
    337  f1db		       85 85		      sta	Timer	; add 1 to timer (BCD does not like INC instruction)
    338  f1dd
    339  f1dd		       d8		      cld		; disable BCD(decimal) mode
    340  f1de
    341  f1de				   EndPositionUpdate
    342  f1de
    343  f1de							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    344  f1de							;; Check for object collision
    345  f1de							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    346  f1de				   CheckCollisionP0P1
    347  f1de		       a9 80		      lda	#%10000000
    348  f1e0		       24 07		      bit	CXPPMM	; check CXPPMM bit 7 with the above pattern
    349  f1e2		       d0 06		      bne	.P0P1Collided	; if collided, game over
    350  f1e4		       20 36 f2 	      jsr	SetBackgroundColor
    351  f1e7		       4c ed f1 	      jmp	EndCollisionCheck	; else, skip to next check
    352  f1ea				   .P0P1Collided
    353  f1ea		       20 53 f2 	      jsr	GameOver	; call GameOver subroutine
    354  f1ed				   EndCollisionCheck
    355  f1ed		       85 2c		      sta	CXCLR	; clear all collision checks
    356  f1ef
    357  f1ef							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    358  f1ef							;; Display Overscan
    359  f1ef							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    360  f1ef		       a9 02		      lda	#2
    361  f1f1		       85 01		      sta	VBLANK	; turn VBLANK on
    362  f1f3					      REPEAT	30
    363  f1f3		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f1f3					      REPEND
    363  f1f5		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f1f5					      REPEND
    363  f1f7		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f1f7					      REPEND
    363  f1f9		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f1f9					      REPEND
    363  f1fb		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f1fb					      REPEND
    363  f1fd		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f1fd					      REPEND
    363  f1ff		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f1ff					      REPEND
    363  f201		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f201					      REPEND
    363  f203		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f203					      REPEND
    363  f205		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f205					      REPEND
    363  f207		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f207					      REPEND
    363  f209		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f209					      REPEND
    363  f20b		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f20b					      REPEND
    363  f20d		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f20d					      REPEND
    363  f20f		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f20f					      REPEND
    363  f211		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f211					      REPEND
    363  f213		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f213					      REPEND
    363  f215		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f215					      REPEND
    363  f217		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f217					      REPEND
    363  f219		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f219					      REPEND
    363  f21b		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f21b					      REPEND
    363  f21d		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f21d					      REPEND
    363  f21f		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f21f					      REPEND
    363  f221		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f221					      REPEND
    363  f223		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f223					      REPEND
    363  f225		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f225					      REPEND
    363  f227		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f227					      REPEND
    363  f229		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f229					      REPEND
    363  f22b		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    362  f22b					      REPEND
    363  f22d		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    364  f22f					      REPEND
    365  f22f		       a9 00		      lda	#0
    366  f231		       85 01		      sta	VBLANK	; turn off VBLANK
    367  f233
    368  f233							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    369  f233							;; Loop back to start a brand new frame
    370  f233							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    371  f233		       4c 47 f0 	      jmp	StartFrame	; loop back to next frame
    372  f236
    373  f236							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    374  f236							;; Set playfield and terrain color
    375  f236							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    376  f236				   SetBackgroundColor subroutine
    377  f236		       a9 c2		      lda	#$C2	; green
    378  f238		       85 97		      sta	TerrainColor
    379  f23a		       a9 84		      lda	#$84	; blue
    380  f23c		       85 98		      sta	RiverColor
    381  f23e		       60		      rts
    382  f23f
    383  f23f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    384  f23f							;; Subroutine to handle object horizontal position
    385  f23f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    386  f23f							;; A is the target x-coord position in pixels of our object
    387  f23f							;; Y is the object type (0:player, 1:bomber, 2:missle0, 3:missile1, 4:ball)
    388  f23f							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    389  f23f				   SetObjectXPos subroutine
    390  f23f		       85 02		      sta	WSYNC
    391  f241		       38		      sec
    392  f242				   .Div15Loop
    393  f242		       e9 0f		      sbc	#15
    394  f244		       b0 fc		      bcs	.Div15Loop	; loop until carry-flag is clear
    395  f246		       49 07		      eor	#7
    396  f248		       0a		      asl
    397  f249		       0a		      asl
    398  f24a		       0a		      asl
    399  f24b		       0a		      asl		; four shift lefts to get only the top 4 bits
    400  f24c		       99 20 00 	      sta	HMP0,Y	; store the fine offset to the correct HMxx
    401  f24f		       99 10 00 	      sta	RESP0,Y	; fix object position in 15-step increment
    402  f252		       60		      rts
    403  f253
    404  f253							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    405  f253							;; Game Over subroutine
    406  f253							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    407  f253				   GameOver   subroutine
    408  f253		       a9 30		      lda	#$30
    409  f255		       85 97		      sta	TerrainColor	; set terrain color to red
    410  f257		       85 98		      sta	RiverColor	; set river color to red
    411  f259		       a9 00		      lda	#0
    412  f25b		       85 84		      sta	Score	; Score = 0
    413  f25d		       60		      rts
    414  f25e
    415  f25e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    416  f25e							;; Subroutine to generate a Linear-Feedback Shift Resgistar random number
    417  f25e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    418  f25e				   GetRandomBomberPos subroutine
    419  f25e		       a5 94		      lda	Random
    420  f260		       0a		      asl
    421  f261		       45 94		      eor	Random
    422  f263		       0a		      asl
    423  f264		       45 94		      eor	Random
    424  f266		       0a		      asl
    425  f267		       0a		      asl
    426  f268		       45 94		      eor	Random
    427  f26a		       0a		      asl
    428  f26b		       26 94		      rol	Random	; performs a series of shifts and bit operations
    429  f26d		       4a		      lsr
    430  f26e		       4a		      lsr		; divide the value by 4 with 2 right shifts
    431  f26f		       85 82		      sta	BomberXPos
    432  f271		       a9 1e		      lda	#30
    433  f273		       65 82		      adc	BomberXPos
    434  f275		       85 82		      sta	BomberXPos
    435  f277
    436  f277		       a9 60		      lda	#96
    437  f279		       85 83		      sta	BomberYPos
    438  f27b		       60		      rts
    439  f27c
    440  f27c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    441  f27c							;; Subroutine to handle scoreboard digits to be displayed on the screen
    442  f27c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    443  f27c							;; Convert the high and low nibbles of the variable Score and Timer
    444  f27c							;; into the offsets of digits lookup table so the values can be displayed.
    445  f27c							;; Each digit has a height of 5 bytes in the lookup table.
    446  f27c							;;
    447  f27c							;; For the low nibble we need to multiple by 5
    448  f27c							;;  - we can use left shitsf to perform multiplcation by 2
    449  f27c							;;  - for any number N, the value of N*5 = (N*2*2)+N
    450  f27c							;;
    451  f27c							;; For the upper nibble, since it's already times 16, we need to divide it
    452  f27c							;; and then multiply by 5.
    453  f27c							;;  - we can use right shifts to perform division by 2
    454  f27c							;;  - for any number N, the value of (N/16)*5 = (N/2/2)+(N/2/2/2/2)
    455  f27c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    456  f27c				   CalculateDigitOffset subroutine
    457  f27c		       a2 01		      ldx	#1	; X register is the loop counter
    458  f27e				   .PrepareScoreLoop		; this will loop twice, first X=1, and then X=0
    459  f27e		       b5 84		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    460  f280		       29 0f		      and	#$0F
    461  f282		       85 86		      sta	Temp	; save the value of A into Temp
    462  f284		       0a		      asl
    463  f285		       0a		      asl
    464  f286		       65 86		      adc	Temp
    465  f288		       95 87		      sta	OnesDigitOffset,X	; save A in OnesDigitOffset+1 or OnesDigitOffset+0
    466  f28a
    467  f28a		       b5 84		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    468  f28c		       29 f0		      and	#$F0	; remove the ones digit by masking 4 bits
    469  f28e		       4a		      lsr		; N/2
    470  f28f		       4a		      lsr		; N/4
    471  f290		       85 86		      sta	Temp	; Store into temp N/4
    472  f292		       4a		      lsr		; N/8
    473  f293		       4a		      lsr		; N/16
    474  f294		       65 86		      adc	Temp	; add N/16 with value in Temp(N/4)
    475  f296		       95 89		      sta	TensDigitOffset,X	; save A in TensDigitOffset+1 or TensDigitOffset+0 
    476  f298
    477  f298		       ca		      dex
    478  f299		       10 e3		      bpl	.PrepareScoreLoop	; while X >= 0 loop again
    479  f29b		       60		      rts
    480  f29c
    481  f29c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    482  f29c							;; Subroutine to to waste 12 cycles
    483  f29c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    484  f29c							;; jsr takes 6 cycles
    485  f29c							;; rts takes 6 cycles
    486  f29c							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    487  f29c				   Sleep12Cycles subroutine
    488  f29c		       60		      rts
    489  f29d
    490  f29d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    491  f29d							;; Declare ROM lookup tables
    492  f29d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    493  f29d				   Digits
    494  f29d		       77		      .byte.b	%01110111	; ### ###
    495  f29e		       55		      .byte.b	%01010101	; # # # #
    496  f29f		       55		      .byte.b	%01010101	; # # # #
    497  f2a0		       55		      .byte.b	%01010101	; # # # #
    498  f2a1		       77		      .byte.b	%01110111	; ### ###
    499  f2a2
    500  f2a2		       11		      .byte.b	%00010001	;   #	 #
    501  f2a3		       11		      .byte.b	%00010001	;   #	 #
    502  f2a4		       11		      .byte.b	%00010001	;   #	 #
    503  f2a5		       11		      .byte.b	%00010001	;   #	 #
    504  f2a6		       11		      .byte.b	%00010001	;   #	 #
    505  f2a7
    506  f2a7		       77		      .byte.b	%01110111	; ### ###
    507  f2a8		       11		      .byte.b	%00010001	;   #	 #
    508  f2a9		       77		      .byte.b	%01110111	; ### ###
    509  f2aa		       44		      .byte.b	%01000100	; #   #
    510  f2ab		       77		      .byte.b	%01110111	; ### ###
    511  f2ac
    512  f2ac		       77		      .byte.b	%01110111	; ### ###
    513  f2ad		       11		      .byte.b	%00010001	;   #	 #
    514  f2ae		       33		      .byte.b	%00110011	;  ##	##
    515  f2af		       11		      .byte.b	%00010001	;   #	 #
    516  f2b0		       77		      .byte.b	%01110111	; ### ###
    517  f2b1
    518  f2b1		       55		      .byte.b	%01010101	; # # # #
    519  f2b2		       55		      .byte.b	%01010101	; # # # #
    520  f2b3		       77		      .byte.b	%01110111	; ### ###
    521  f2b4		       11		      .byte.b	%00010001	;   #	 #
    522  f2b5		       11		      .byte.b	%00010001	;   #	 #
    523  f2b6
    524  f2b6		       77		      .byte.b	%01110111	; ### ###
    525  f2b7		       44		      .byte.b	%01000100	; #   #
    526  f2b8		       77		      .byte.b	%01110111	; ### ###
    527  f2b9		       11		      .byte.b	%00010001	;   #	 #
    528  f2ba		       77		      .byte.b	%01110111	; ### ###
    529  f2bb
    530  f2bb		       77		      .byte.b	%01110111	; ### ###
    531  f2bc		       44		      .byte.b	%01000100	; #   #
    532  f2bd		       77		      .byte.b	%01110111	; ### ###
    533  f2be		       55		      .byte.b	%01010101	; # # # #
    534  f2bf		       77		      .byte.b	%01110111	; ### ###
    535  f2c0
    536  f2c0		       77		      .byte.b	%01110111	; ### ###
    537  f2c1		       11		      .byte.b	%00010001	;   #	 #
    538  f2c2		       11		      .byte.b	%00010001	;   #	 #
    539  f2c3		       11		      .byte.b	%00010001	;   #	 #
    540  f2c4		       11		      .byte.b	%00010001	;   #	 #
    541  f2c5
    542  f2c5		       77		      .byte.b	%01110111	; ### ###
    543  f2c6		       55		      .byte.b	%01010101	; # # # #
    544  f2c7		       77		      .byte.b	%01110111	; ### ###
    545  f2c8		       55		      .byte.b	%01010101	; # # # #
    546  f2c9		       77		      .byte.b	%01110111	; ### ###
    547  f2ca
    548  f2ca		       77		      .byte.b	%01110111	; ### ###
    549  f2cb		       55		      .byte.b	%01010101	; # # # #
    550  f2cc		       77		      .byte.b	%01110111	; ### ###
    551  f2cd		       11		      .byte.b	%00010001	;   #	 #
    552  f2ce		       77		      .byte.b	%01110111	; ### ###
    553  f2cf
    554  f2cf		       22		      .byte.b	%00100010	;  #	#
    555  f2d0		       55		      .byte.b	%01010101	; # # # #
    556  f2d1		       77		      .byte.b	%01110111	; ### ###
    557  f2d2		       55		      .byte.b	%01010101	; # # # #
    558  f2d3		       55		      .byte.b	%01010101	; # # # #
    559  f2d4
    560  f2d4		       77		      .byte.b	%01110111	; ### ###
    561  f2d5		       55		      .byte.b	%01010101	; # # # #
    562  f2d6		       66		      .byte.b	%01100110	; ##  ##
    563  f2d7		       55		      .byte.b	%01010101	; # # # #
    564  f2d8		       77		      .byte.b	%01110111	; ### ###
    565  f2d9
    566  f2d9		       77		      .byte.b	%01110111	; ### ###
    567  f2da		       44		      .byte.b	%01000100	; #   #
    568  f2db		       44		      .byte.b	%01000100	; #   #
    569  f2dc		       44		      .byte.b	%01000100	; #   #
    570  f2dd		       77		      .byte.b	%01110111	; ### ###
    571  f2de
    572  f2de		       66		      .byte.b	%01100110	; ##  ##
    573  f2df		       55		      .byte.b	%01010101	; # # # #
    574  f2e0		       55		      .byte.b	%01010101	; # # # #
    575  f2e1		       55		      .byte.b	%01010101	; # # # #
    576  f2e2		       66		      .byte.b	%01100110	; ##  ##
    577  f2e3
    578  f2e3		       77		      .byte.b	%01110111	; ### ###
    579  f2e4		       44		      .byte.b	%01000100	; #   #
    580  f2e5		       77		      .byte.b	%01110111	; ### ###
    581  f2e6		       44		      .byte.b	%01000100	; #   #
    582  f2e7		       77		      .byte.b	%01110111	; ### ###
    583  f2e8
    584  f2e8		       77		      .byte.b	%01110111	; ### ###
    585  f2e9		       44		      .byte.b	%01000100	; #   #
    586  f2ea		       66		      .byte.b	%01100110	; ##  ##
    587  f2eb		       44		      .byte.b	%01000100	; #   #
    588  f2ec		       44		      .byte.b	%01000100	; #   #
    589  f2ed
    590  f2ed				   JetSprite
    591  f2ed		       00		      .byte.b	#%00000000	;
    592  f2ee		       14		      .byte.b	#%00010100	;   # #
    593  f2ef		       7f		      .byte.b	#%01111111	; #######
    594  f2f0		       3e		      .byte.b	#%00111110	;  #####
    595  f2f1		       1c		      .byte.b	#%00011100	;   ###
    596  f2f2		       1c		      .byte.b	#%00011100	;   ###
    597  f2f3		       08		      .byte.b	#%00001000	;    #
    598  f2f4		       08		      .byte.b	#%00001000	;    #
    599  f2f5		       08		      .byte.b	#%00001000	;    #
    600  f2f6
    601  f2f6				   JetSpriteTurn
    602  f2f6		       00		      .byte.b	#%00000000	;
    603  f2f7		       08		      .byte.b	#%00001000	;    #
    604  f2f8		       3e		      .byte.b	#%00111110	;  #####
    605  f2f9		       1c		      .byte.b	#%00011100	;   ###
    606  f2fa		       1c		      .byte.b	#%00011100	;   ###
    607  f2fb		       1c		      .byte.b	#%00011100	;   ###
    608  f2fc		       08		      .byte.b	#%00001000	;    #
    609  f2fd		       08		      .byte.b	#%00001000	;    #
    610  f2fe		       08		      .byte.b	#%00001000	;    #
    611  f2ff
    612  f2ff				   BomberSprite
    613  f2ff		       00		      .byte.b	#%00000000	;
    614  f300		       08		      .byte.b	#%00001000	;    #
    615  f301		       08		      .byte.b	#%00001000	;    #
    616  f302		       2a		      .byte.b	#%00101010	;  # # #
    617  f303		       3e		      .byte.b	#%00111110	;  #####
    618  f304		       7f		      .byte.b	#%01111111	; #######
    619  f305		       2a		      .byte.b	#%00101010	;  # # #
    620  f306		       08		      .byte.b	#%00001000	;    #
    621  f307		       1c		      .byte.b	#%00011100	;   ###
    622  f308
    623  f308				   JetColor
    624  f308		       00		      .byte.b	#$00
    625  f309		       fe		      .byte.b	#$FE
    626  f30a		       0c		      .byte.b	#$0C
    627  f30b		       0e		      .byte.b	#$0E
    628  f30c		       0e		      .byte.b	#$0E
    629  f30d		       04		      .byte.b	#$04
    630  f30e		       ba		      .byte.b	#$BA
    631  f30f		       0e		      .byte.b	#$0E
    632  f310		       08		      .byte.b	#$08
    633  f311
    634  f311				   JetColorTurn
    635  f311		       00		      .byte.b	#$00
    636  f312		       fe		      .byte.b	#$FE
    637  f313		       0c		      .byte.b	#$0C
    638  f314		       0e		      .byte.b	#$0E
    639  f315		       0e		      .byte.b	#$0E
    640  f316		       04		      .byte.b	#$04
    641  f317		       0e		      .byte.b	#$0E
    642  f318		       0e		      .byte.b	#$0E
    643  f319		       08		      .byte.b	#$08
    644  f31a
    645  f31a				   BomberColor
    646  f31a		       00		      .byte.b	#$00
    647  f31b		       32		      .byte.b	#$32
    648  f31c		       32		      .byte.b	#$32
    649  f31d		       0e		      .byte.b	#$0E
    650  f31e		       40		      .byte.b	#$40
    651  f31f		       40		      .byte.b	#$40
    652  f320		       40		      .byte.b	#$40
    653  f321		       40		      .byte.b	#$40
    654  f322		       40		      .byte.b	#$40
    655  f323
    656  f323							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    657  f323							;; Complete ROM size with exactly 4KB
    658  f323							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    659  fffc					      org	$FFFC
    660  fffc		       00 f0		      word.w	Reset	; write 2 bytes with the program reset address
    661  fffe		       00 f0		      word.w	Reset	; write 2 bytes with the interruption vector
