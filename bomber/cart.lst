------- FILE bomber.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
      2  10000 ????
      3  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      4  10000 ????						;; Include VCS register memory and macros
      5  10000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE bomber.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  0000 ????				      include	"macro.h"
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.06, 3/SEPTEMBER/2004
      3  0000 ????
      4  0000 ????	       00 6a	   VERSION_MACRO =	106
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_BLANK (Edwin Blink)
     22  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     23  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     24  0000 ????						;			   used for code assembly.
     25  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     26  0000 ????						;
     27  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     28  0000 ????						;
     29  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     30  0000 ????						;			   (standardised macro for vertical synch code)
     31  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     32  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     33  0000 ????						; 1.0	22/MAR/2003		Initial release
     34  0000 ????
     35  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     36  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     37  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     38  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     39  0000 ????						;   registers and require them to be defined first).
     40  0000 ????
     41  0000 ????						; Available macros...
     42  0000 ????						;   SLEEP n		 - sleep for n cycles
     43  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     44  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     45  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     46  0000 ????
     47  0000 ????						;-------------------------------------------------------------------------------
     48  0000 ????						; SLEEP duration
     49  0000 ????						; Original author: Thomas Jentzsch
     50  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     51  0000 ????						; useful for code where precise timing is required.
     52  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     53  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     54  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     55  0000 ????
     56  0000 ????				      MAC	sleep
     57  0000 ????			   .CYCLES    SET	{1}
     58  0000 ????
     59  0000 ????				      IF	.CYCLES < 2
     60  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     61  0000 ????				      ERR
     62  0000 ????				      ENDIF
     63  0000 ????
     64  0000 ????				      IF	.CYCLES & 1
     65  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     66  0000 ????				      nop	0
     67  0000 ????				      ELSE
     68  0000 ????				      bit	VSYNC
     69  0000 ????				      ENDIF
     70  0000 ????			   .CYCLES    SET	.CYCLES - 3
     71  0000 ????				      ENDIF
     72  0000 ????
     73  0000 ????				      REPEAT	.CYCLES / 2
     74  0000 ????				      nop
     75  0000 ????				      REPEND
     76  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     77  0000 ????
     78  0000 ????						;-------------------------------------------------------------------------------
     79  0000 ????						; VERTICAL_SYNC
     80  0000 ????						; revised version by Edwin Blink -- saves bytes!
     81  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     82  0000 ????						; Note: Alters the accumulator
     83  0000 ????
     84  0000 ????						; OUT: A = 0
     85  0000 ????
     86  0000 ????				      MAC	vertical_sync
     87  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     88  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     89  0000 ????				      sta	VSYNC
     90  0000 ????				      lsr
     91  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     92  0000 ????				      ENDM
     93  0000 ????
     94  0000 ????						;-------------------------------------------------------------------------------
     95  0000 ????						; CLEAN_START
     96  0000 ????						; Original author: Andrew Davie
     97  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
     98  0000 ????						; Sets stack pointer to $FF, and all registers to 0
     99  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    100  0000 ????						; Use as very first section of code on boot (ie: at reset)
    101  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    102  0000 ????
    103  0000 ????				      MAC	clean_start
    104  0000 ????				      sei
    105  0000 ????				      cld
    106  0000 ????
    107  0000 ????				      ldx	#0
    108  0000 ????				      txa
    109  0000 ????				      tay
    110  0000 ????			   .CLEAR_STACK dex
    111  0000 ????				      txs
    112  0000 ????				      pha
    113  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    114  0000 ????
    115  0000 ????				      ENDM
    116  0000 ????
    117  0000 ????						;-------------------------------------------------------
    118  0000 ????						; SET_POINTER
    119  0000 ????						; Original author: Manuel Rotschkar
    120  0000 ????						;
    121  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    122  0000 ????						;
    123  0000 ????						; Usage: SET_POINTER pointer, address
    124  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    125  0000 ????						;
    126  0000 ????						; Note: Alters the accumulator, NZ flags
    127  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    128  0000 ????						; IN 2: absolute address
    129  0000 ????
    130  0000 ????				      MAC	set_pointer
    131  0000 ????			   .POINTER   SET	{1}
    132  0000 ????			   .ADDRESS   SET	{2}
    133  0000 ????
    134  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    135  0000 ????				      STA	.POINTER	; Store in pointer
    136  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    137  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    138  0000 ????
    139  0000 ????				      ENDM
    140  0000 ????
    141  0000 ????						;-------------------------------------------------------
    142  0000 ????						; BOUNDARY byte#
    143  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    144  0000 ????						;
    145  0000 ????						; Push data to a certain position inside a page and keep count of how
    146  0000 ????						; many free bytes the programmer will have.
    147  0000 ????						;
    148  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    149  0000 ????
    150  0000 ????			   .FREE_BYTES SET	0
    151  0000 ????				      MAC	boundary
    152  0000 ????				      REPEAT	256
    153  0000 ????				      IF	<. % {1} = 0
    154  0000 ????				      MEXIT
    155  0000 ????				      ELSE
    156  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    157  0000 ????				      .byte	$00
    158  0000 ????				      ENDIF
    159  0000 ????				      REPEND
    160  0000 ????				      ENDM
    161  0000 ????
    162  0000 ????						;-------------------------------------------------------
    163  0000 ????						; SKIP_SCANLINES #lines
    164  0000 ????						;
    165  0000 ????						; Skip a given # of scanlines.
    166  0000 ????						; Sets the X register to zero.
    167  0000 ????
    168  0000 ????				      MAC	skip_scanlines
    169  0000 ????			   .LINES     SET	{1}
    170  0000 ????				      ldx	#.LINES
    171  0000 ????			   .vblank    sta	WSYNC
    172  0000 ????				      dex
    173  0000 ????				      bne	.vblank
    174  0000 ????				      ENDM
    175  0000 ????
    176  0000 ????						; EOF
------- FILE bomber.asm
      8  0000 ????
      9  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     10  0000 ????						;; Variables declaration
     11  0000 ????						;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     12 U009b ????				      seg.u	Variables
     13 U0080					      org	$80
     14 U0080
     15 U0080		       00	   JetXPos    byte.b		; Player X position
     16 U0081		       00	   JetYPos    byte.b		; Player Y Position
     17 U0082		       00	   BomberXPos byte.b		; Enemy X Position
     18 U0083		       00	   BomberYPos byte.b		; Enemy Y Position
     19 U0084		       00	   MissileXPos byte.b		; Missile X Position
     20 U0085		       00	   MissileYPos byte.b		; Missile Y Position
     21 U0086		       00	   Score      byte.b		; 2-digit score stored as BCD
     22 U0087		       00	   Timer      byte.b		; 2-digit score stored as BCD
     23 U0088		       00	   Temp       byte.b		; auxiliary variable to store temp score values
     24 U0089		       00 00	   OnesDigitOffset word.w		; lookup table offset for the 1's digit
     25 U008b		       00 00	   TensDigitOffset word.w		; lookup table offset for the 10's digit
     26 U008d		       00 00	   JetSpritePtr word.w		; pointer to player0 sprite lookup table
     27 U008f		       00 00	   JetColorPtr word.w		; pointer to player0 color lookup table
     28 U0091		       00 00	   BomberSpritePtr word.w		; pointer to player1 sprite lookup table
     29 U0093		       00 00	   BomberColorPtr word.w		; pointer to player1 color lookup table
     30 U0095		       00	   JetAnimOffset byte.b		; Player sprite frame offset for animation
     31 U0096		       00	   Random     byte.b		; random number generated to set enemy position
     32 U0097		       00	   ScoreSprite byte.b		; store the sprite bit pattern for the score
     33 U0098		       00	   TimerSprite byte.b		; store the sprite bit pattern for the timer
     34 U0099		       00	   TerrainColor byte.b		; store the color of the terrain
     35 U009a		       00	   RiverColor byte.b		; store the colore of the river
     36 U009b
     37 U009b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     38 U009b							;; Define constants
     39 U009b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     40 U009b		       00 09	   JET_HEIGHT =	9	; player0 sprite height (# rows in lookup table)
     41 U009b		       00 09	   BOMBER_HEIGHT =	9	; player1 sprite height (# rows in lookup table)
     42 U009b		       00 05	   DIGITS_HEIGHT =	5	; scoreboard digit hieght (# rows in lookup table)
     43 U009b
     44 U009b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     45 U009b							;; Code start
     46 U009b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     47  10000 ????				       seg	Code
     48  f000					      org	$F000
     49  f000
     50  f000				   Reset
      0  f000					      CLEAN_START		; Call macro to reset memory and registers
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     52  f00b
     53  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     54  f00b							;; Initialize RAM variables and TIA registers
     55  f00b							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     56  f00b		       a9 0a		      lda	#10
     57  f00d		       85 81		      sta	JetYPos
     58  f00f		       a9 5a		      lda	#90
     59  f011		       85 80		      sta	JetXPos
     60  f013		       a9 50		      lda	#80
     61  f015		       85 83		      sta	BomberYPos
     62  f017		       a9 3c		      lda	#60
     63  f019		       85 82		      sta	BomberXPos
     64  f01b		       a9 d4		      lda	#%11010100
     65  f01d		       85 96		      sta	Random
     66  f01f
     67  f01f		       a9 00		      lda	#0
     68  f021		       85 86		      sta	Score
     69  f023		       a9 00		      lda	#0
     70  f025		       85 87		      sta	Timer
     71  f027
     72  f027							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     73  f027							;; Declare a MACRO to check if we should dispaly the missile 0
     74  f027							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     75  f027					      MAC	draw_missile
     76  f027					      lda	#%00000000
     77  f027					      cpx	MissileYPos	; compare X (current scanline) with missile Y pos
     78  f027					      bne	.SkipMissileDraw	; if (X != missile Y position), skip draw
     79  f027				   .DrawMissile
     80  f027					      lda	#%00000010
     81  f027					      inc	MissileYPos
     82  f027				   .SkipMissileDraw
     83  f027					      sta	ENAM0	; store the correct value in the TIA missile register
     84  f027					      ENDM
     85  f027
     86  f027							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     87  f027							;; Initialize pointers to the correct lookup table addresses
     88  f027							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     89  f027		       a9 4b		      lda	#<JetSprite
     90  f029		       85 8d		      sta	JetSpritePtr	; lo-byte pointer for jet sprite lookup table
     91  f02b		       a9 f3		      lda	#>JetSprite
     92  f02d		       85 8e		      sta	JetSpritePtr+1	; hi-byte pointer for jet sprite lookup table
     93  f02f
     94  f02f		       a9 66		      lda	#<JetColor
     95  f031		       85 8f		      sta	JetColorPtr	; lo-byte pointer for jet color lookup table
     96  f033		       a9 f3		      lda	#>JetColor
     97  f035		       85 90		      sta	JetColorPtr+1	; hi-byte pointer for jet color lookup table
     98  f037
     99  f037		       a9 5d		      lda	#<BomberSprite
    100  f039		       85 91		      sta	BomberSpritePtr	; lo-byte pointer for enemy sprite lookup table
    101  f03b		       a9 f3		      lda	#>BomberSprite
    102  f03d		       85 92		      sta	BomberSpritePtr+1	; hi-byte pointer for enemy sprite lookup table
    103  f03f
    104  f03f		       a9 78		      lda	#<BomberColor
    105  f041		       85 93		      sta	BomberColorPtr	; lo-byte pointer for enemy color lookup table
    106  f043		       a9 f3		      lda	#>BomberColor
    107  f045		       85 94		      sta	BomberColorPtr+1	; hi-byte pointer for enemy color lookup table
    108  f047
    109  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    110  f047							;; Start the main display loop and frame rendering
    111  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    112  f047				   StartFrame
    113  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    114  f047							;; Display VSYNC and VBLANK
    115  f047							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    116  f047		       a9 02		      lda	#2
    117  f049		       85 01		      sta	VBLANK	; turn on VBLANK
    118  f04b		       85 00		      sta	VSYNC	; turn on VSYNC
    119  f04d					      REPEAT	3
    120  f04d		       85 02		      sta	WSYNC	; recommended lines of VSYNC
    119  f04d					      REPEND
    120  f04f		       85 02		      sta	WSYNC	; recommended lines of VSYNC
    119  f04f					      REPEND
    120  f051		       85 02		      sta	WSYNC	; recommended lines of VSYNC
    121  f053					      REPEND
    122  f053		       a9 00		      lda	#0
    123  f055		       85 00		      sta	VSYNC	; turn off VSYNC
    124  f057					      REPEAT	32
    125  f057		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f057					      REPEND
    125  f059		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f059					      REPEND
    125  f05b		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f05b					      REPEND
    125  f05d		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f05d					      REPEND
    125  f05f		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f05f					      REPEND
    125  f061		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f061					      REPEND
    125  f063		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f063					      REPEND
    125  f065		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f065					      REPEND
    125  f067		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f067					      REPEND
    125  f069		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f069					      REPEND
    125  f06b		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f06b					      REPEND
    125  f06d		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f06d					      REPEND
    125  f06f		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f06f					      REPEND
    125  f071		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f071					      REPEND
    125  f073		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f073					      REPEND
    125  f075		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f075					      REPEND
    125  f077		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f077					      REPEND
    125  f079		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f079					      REPEND
    125  f07b		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f07b					      REPEND
    125  f07d		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f07d					      REPEND
    125  f07f		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f07f					      REPEND
    125  f081		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f081					      REPEND
    125  f083		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f083					      REPEND
    125  f085		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f085					      REPEND
    125  f087		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f087					      REPEND
    125  f089		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f089					      REPEND
    125  f08b		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f08b					      REPEND
    125  f08d		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f08d					      REPEND
    125  f08f		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f08f					      REPEND
    125  f091		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f091					      REPEND
    125  f093		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    124  f093					      REPEND
    125  f095		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    126  f097					      REPEND
    127  f097
    128  f097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    129  f097							;; Calculations and task performed in the the VBlank
    130  f097							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    131  f097		       a5 80		      lda	JetXPos
    132  f099		       a0 00		      ldy	#0
    133  f09b		       20 9d f2 	      jsr	SetObjectXPos	; set player0 horizontal position
    134  f09e
    135  f09e		       a5 82		      lda	BomberXPos
    136  f0a0		       a0 01		      ldy	#1
    137  f0a2		       20 9d f2 	      jsr	SetObjectXPos	; set bomber horizontal position
    138  f0a5
    139  f0a5		       a5 84		      lda	MissileXPos
    140  f0a7		       a0 02		      ldy	#2
    141  f0a9		       20 9d f2 	      jsr	SetObjectXPos	; set missile horizontal position
    142  f0ac
    143  f0ac		       20 da f2 	      jsr	CalculateDigitOffset	; calculate the scoreboard digit lookup table offset
    144  f0af
    145  f0af		       20 70 f2 	      jsr	GenerateJetSound	; configure and enable our jet engine audio
    146  f0b2
    147  f0b2		       85 02		      sta	WSYNC
    148  f0b4		       85 2a		      sta	HMOVE	; apply the horizontal offsets previously set by the routine
    149  f0b6
    150  f0b6		       a9 00		      lda	#0
    151  f0b8		       85 01		      sta	VBLANK	; turn off VBLANK
    152  f0ba
    153  f0ba							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    154  f0ba							;; Display the scoreboard
    155  f0ba							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    156  f0ba		       a9 00		      lda	#0	; clear TIA registers before each new frame
    157  f0bc		       85 09		      sta	COLUBK
    158  f0be		       85 0d		      sta	PF0
    159  f0c0		       85 0e		      sta	PF1
    160  f0c2		       85 0f		      sta	PF2
    161  f0c4		       85 1b		      sta	GRP0
    162  f0c6		       85 1c		      sta	GRP1
    163  f0c8		       85 0a		      sta	CTRLPF
    164  f0ca
    165  f0ca		       a9 1e		      lda	#$1E
    166  f0cc		       85 08		      sta	COLUPF
    167  f0ce
    168  f0ce		       a2 05		      ldx	#DIGITS_HEIGHT
    169  f0d0				   .ScoreDigitLoop
    170  f0d0		       a4 8b		      ldy	TensDigitOffset	; get the tens digit offset for the Score
    171  f0d2		       b9 fb f2 	      lda	Digits,Y	; load the bit pattern from lookup table + Y offset
    172  f0d5		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit from the A register
    173  f0d7		       85 97		      sta	ScoreSprite	; save the score tens digit pattern in a variable
    174  f0d9
    175  f0d9		       a4 89		      ldy	OnesDigitOffset
    176  f0db		       b9 fb f2 	      lda	Digits,Y
    177  f0de		       29 0f		      and	#$0F	; remove the graphics for the tens digit from the A register
    178  f0e0		       05 97		      ora	ScoreSprite	; merge it with the saved tens digit sprite
    179  f0e2		       85 97		      sta	ScoreSprite	; and save it to ScoreSprite
    180  f0e4		       85 02		      sta	WSYNC
    181  f0e6		       85 0e		      sta	PF1	; update the playfield to display the Score sprite
    182  f0e8
    183  f0e8		       a4 8c		      ldy	TensDigitOffset+1	; get the tens digit offset for the Score
    184  f0ea		       b9 fb f2 	      lda	Digits,Y	; load the bit pattern from lookup table + Y offset
    185  f0ed		       29 f0		      and	#$F0	; mask/remove the graphics for the ones digit from the A register
    186  f0ef		       85 98		      sta	TimerSprite	; save the score tens digit pattern in a variable
    187  f0f1
    188  f0f1		       a4 8a		      ldy	OnesDigitOffset+1
    189  f0f3		       b9 fb f2 	      lda	Digits,Y
    190  f0f6		       29 0f		      and	#$0F	; remove the graphics for the tens digit from the A register
    191  f0f8		       05 98		      ora	TimerSprite	; merge it with the saved tens digit sprite
    192  f0fa		       85 98		      sta	TimerSprite	; and save it to ScoreSprite
    193  f0fc
    194  f0fc		       20 fa f2 	      jsr	Sleep12Cycles	; waste some cycles
    195  f0ff
    196  f0ff		       85 0e		      sta	PF1	; update the playfield for Timer display
    197  f101
    198  f101		       a4 97		      ldy	ScoreSprite	; preload for the next scanline
    199  f103		       85 02		      sta	WSYNC
    200  f105
    201  f105		       84 0e		      sty	PF1	; update playfield for the score display
    202  f107		       e6 8b		      inc	TensDigitOffset
    203  f109		       e6 8c		      inc	TensDigitOffset+1
    204  f10b		       e6 89		      inc	OnesDigitOffset
    205  f10d		       e6 8a		      inc	OnesDigitOffset+1	; increment all digits for the next line of data
    206  f10f
    207  f10f		       20 fa f2 	      jsr	Sleep12Cycles
    208  f112
    209  f112		       ca		      dex
    210  f113		       85 0e		      sta	PF1	; update playfield for timer display
    211  f115		       d0 b9		      bne	.ScoreDigitLoop
    212  f117
    213  f117		       85 02		      sta	WSYNC
    214  f119		       a9 00		      lda	#0
    215  f11b		       85 0d		      sta	PF0
    216  f11d		       85 0e		      sta	PF1
    217  f11f		       85 0f		      sta	PF2
    218  f121		       85 02		      sta	WSYNC
    219  f123		       85 02		      sta	WSYNC
    220  f125		       85 02		      sta	WSYNC
    221  f127
    222  f127							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    223  f127							;; 96 visible scanlines for main game (because 2-line kernel)
    224  f127							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    225  f127				   GameVisibleLine
    226  f127		       a5 99		      lda	TerrainColor
    227  f129		       85 09		      sta	COLUBK	; set background color to terrain color
    228  f12b		       a5 9a		      lda	RiverColor
    229  f12d		       85 08		      sta	COLUPF	; set playfield to river color
    230  f12f		       a9 01		      lda	#1
    231  f131		       85 0a		      sta	CTRLPF	; enable playfield reflection
    232  f133		       a9 f0		      lda	#$F0
    233  f135		       85 0d		      sta	PF0	; setting PF0 bit pattern
    234  f137		       a9 fc		      lda	#$FC
    235  f139		       85 0e		      sta	PF1
    236  f13b		       a9 00		      lda	#0
    237  f13d		       85 0f		      sta	PF2
    238  f13f
    239  f13f		       a2 55		      ldx	#85	; X counts the number of remaining scanlines
    240  f141				   .GameLineLoop		; . has no special meaning, tutor uses it to indicate that this segment is within the above segment
      0  f141					      DRAW_MISSILE		; macro to check if we should draw the missile
      1  f141		       a9 00		      lda	#%00000000
      2  f143		       e4 85		      cpx	MissileYPos
      3  f145		       d0 04		      bne	.SkipMissileDraw
      4  f147				   .DrawMissile
      5  f147		       a9 02		      lda	#%00000010
      6  f149		       e6 85		      inc	MissileYPos
      7  f14b				   .SkipMissileDraw
      8  f14b		       85 1d		      sta	ENAM0
    242  f14d
    243  f14d				   .AreWeInsideJetSprite
    244  f14d		       8a		      txa		; transfer X to A
    245  f14e		       38		      sec		; Set carry flag before subtraction
    246  f14f		       e5 81		      sbc	JetYPos	; subtract sprite Y-coordinate
    247  f151		       c9 09		      cmp	#JET_HEIGHT	; are we inside the sprite height
    248  f153		       90 02		      bcc	.DrawJetSprite	; if result < SpriteHeight, call the draw routine
    249  f155		       a9 00		      lda	#0	; else, set lookup index to zero
    250  f157				   .DrawJetSprite
    251  f157		       18		      clc		; clear carry flag before addition
    252  f158		       65 95		      adc	JetAnimOffset	; offset animation to jump to correct frame 
    253  f15a		       a8		      tay
    254  f15b		       b1 8d		      lda	(JetSpritePtr),Y	; load player0 bitmap data from lookup table
    255  f15d		       85 02		      sta	WSYNC
    256  f15f		       85 1b		      sta	GRP0	; set graphics for player0
    257  f161		       b1 8f		      lda	(JetColorPtr),Y	; load player0 color data from lookup table
    258  f163		       85 06		      sta	COLUP0	; set color of player0
    259  f165
    260  f165				   .AreWeInsideBomber
    261  f165		       8a		      txa		; transfer X to A
    262  f166		       38		      sec		; Set carry flag before subtraction
    263  f167		       e5 83		      sbc	BomberYPos	; subtract sprite Y-coordinate
    264  f169		       c9 09		      cmp	#BOMBER_HEIGHT	; are we inside the sprite height
    265  f16b		       90 02		      bcc	.DrawBomberSprite	; if result < SpriteHeight, call the draw routine
    266  f16d		       a9 00		      lda	#0	; else, set lookup index to zero
    267  f16f				   .DrawBomberSprite
    268  f16f		       a8		      tay
    269  f170		       a9 05		      lda	#%00000101
    270  f172		       85 05		      sta	NUSIZ1	; stretch bomber sprite
    271  f174		       b1 91		      lda	(BomberSpritePtr),Y	; load player0 bitmap data from lookup table
    272  f176		       85 02		      sta	WSYNC
    273  f178		       85 1c		      sta	GRP1	; set graphics for player1
    274  f17a		       b1 93		      lda	(BomberColorPtr),Y	; load player0 color data from lookup table
    275  f17c		       85 07		      sta	COLUP1	; set color of player1
    276  f17e
    277  f17e		       ca		      dex
    278  f17f		       d0 c0		      bne	.GameLineLoop
    279  f181
    280  f181		       a9 00		      lda	#0
    281  f183		       85 95		      sta	JetAnimOffset	; always reset animation offset to 0
    282  f185
    283  f185		       85 02		      sta	WSYNC
    284  f187
    285  f187							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    286  f187							;; Display Overscan
    287  f187							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    288  f187		       a9 02		      lda	#2
    289  f189		       85 01		      sta	VBLANK	; turn VBLANK on
    290  f18b					      REPEAT	30
    291  f18b		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f18b					      REPEND
    291  f18d		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f18d					      REPEND
    291  f18f		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f18f					      REPEND
    291  f191		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f191					      REPEND
    291  f193		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f193					      REPEND
    291  f195		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f195					      REPEND
    291  f197		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f197					      REPEND
    291  f199		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f199					      REPEND
    291  f19b		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f19b					      REPEND
    291  f19d		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f19d					      REPEND
    291  f19f		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f19f					      REPEND
    291  f1a1		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f1a1					      REPEND
    291  f1a3		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f1a3					      REPEND
    291  f1a5		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f1a5					      REPEND
    291  f1a7		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f1a7					      REPEND
    291  f1a9		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f1a9					      REPEND
    291  f1ab		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f1ab					      REPEND
    291  f1ad		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f1ad					      REPEND
    291  f1af		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f1af					      REPEND
    291  f1b1		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f1b1					      REPEND
    291  f1b3		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f1b3					      REPEND
    291  f1b5		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f1b5					      REPEND
    291  f1b7		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f1b7					      REPEND
    291  f1b9		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f1b9					      REPEND
    291  f1bb		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f1bb					      REPEND
    291  f1bd		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f1bd					      REPEND
    291  f1bf		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f1bf					      REPEND
    291  f1c1		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f1c1					      REPEND
    291  f1c3		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    290  f1c3					      REPEND
    291  f1c5		       85 02		      sta	WSYNC	; recommended lines of VBLANK
    292  f1c7					      REPEND
    293  f1c7		       a9 00		      lda	#0
    294  f1c9		       85 01		      sta	VBLANK	; turn off VBLANK
    295  f1cb
    296  f1cb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    297  f1cb							;; Process joystick input for player0
    298  f1cb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    299  f1cb				   CheckP0Up
    300  f1cb		       a9 10		      lda	#%00010000	; player0 joystick up
    301  f1cd		       2c 80 02 	      bit	SWCHA
    302  f1d0		       d0 0c		      bne	CheckP0Down	; if bit pattern doesn't match, jump to next check
    303  f1d2				   .checkUpPFLimit
    304  f1d2		       a5 81		      lda	JetYPos
    305  f1d4		       c9 4b		      cmp	#75
    306  f1d6		       f0 06		      beq	CheckP0Down	; if JetYPos == 100, jump to next check
    307  f1d8				   .P0UpPressed
    308  f1d8		       e6 81		      inc	JetYPos
    309  f1da		       a9 00		      lda	#0
    310  f1dc		       85 95		      sta	JetAnimOffset
    311  f1de
    312  f1de				   CheckP0Down
    313  f1de		       a9 20		      lda	#%00100000	; player0 joystick up
    314  f1e0		       2c 80 02 	      bit	SWCHA
    315  f1e3		       d0 0c		      bne	CheckP0Left	; if bit pattern doesn't match, jump to next 
    316  f1e5				   .checkDownPFLimit
    317  f1e5		       a5 81		      lda	JetYPos
    318  f1e7		       c9 00		      cmp	#0
    319  f1e9		       f0 06		      beq	CheckP0Left
    320  f1eb				   .P0DownPressed
    321  f1eb		       c6 81		      dec	JetYPos
    322  f1ed		       a9 00		      lda	#0
    323  f1ef		       85 95		      sta	JetAnimOffset
    324  f1f1
    325  f1f1				   CheckP0Left
    326  f1f1		       a9 40		      lda	#%01000000	; player0 joystick up
    327  f1f3		       2c 80 02 	      bit	SWCHA
    328  f1f6		       d0 0c		      bne	CheckP0Right	; if bit pattern doesn't match, jump to next 
    329  f1f8				   .checkLeftPFLimit
    330  f1f8		       a5 80		      lda	JetXPos
    331  f1fa		       c9 23		      cmp	#35
    332  f1fc		       f0 06		      beq	CheckP0Right
    333  f1fe				   .P0LeftPressed
    334  f1fe		       c6 80		      dec	JetXPos
    335  f200		       a9 09		      lda	#JET_HEIGHT
    336  f202		       85 95		      sta	JetAnimOffset
    337  f204
    338  f204				   CheckP0Right
    339  f204		       a9 80		      lda	#%10000000	; player0 joystick up
    340  f206		       2c 80 02 	      bit	SWCHA
    341  f209		       d0 0c		      bne	CheckButtonPressed	; if bit pattern doesn't match, jump to next
    342  f20b				   .checkRightPFLimit
    343  f20b		       a5 80		      lda	JetXPos
    344  f20d		       c9 64		      cmp	#100
    345  f20f		       f0 06		      beq	CheckButtonPressed
    346  f211				   .P0RightPressed
    347  f211		       e6 80		      inc	JetXPos
    348  f213		       a9 09		      lda	#JET_HEIGHT
    349  f215		       85 95		      sta	JetAnimOffset
    350  f217
    351  f217				   CheckButtonPressed
    352  f217		       a9 80		      lda	#%10000000
    353  f219		       24 0c		      bit	INPT4
    354  f21b		       d0 11		      bne	EndInputCheck	; if button is not pressed, skip to end
    355  f21d				   .ButtonPressed
    356  f21d		       a5 81		      lda	JetYPos
    357  f21f		       18		      clc
    358  f220		       69 08		      adc	#8	; set missile infront of jet
    359  f222		       85 85		      sta	MissileYPos
    360  f224		       a5 80		      lda	JetXPos
    361  f226		       18		      clc
    362  f227		       69 05		      adc	#5	; set missile in the middle of the jet
    363  f229		       85 84		      sta	MissileXPos
    364  f22b		       20 87 f2 	      jsr	GenerateMissileSound
    365  f22e				   EndInputCheck		; fallback when no input was performed
    366  f22e
    367  f22e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    368  f22e							;; Calculations to update position for next frame
    369  f22e							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    370  f22e				   UpdateBomberPosition
    371  f22e		       a5 83		      lda	BomberYPos
    372  f230		       18		      clc
    373  f231		       c9 00		      cmp	#0
    374  f233		       30 05		      bmi	.ResetBomberPosition	; if < 0, reset y-position
    375  f235		       c6 83		      dec	BomberYPos	; else decrement y-position
    376  f237		       4c 46 f2 	      jmp	EndPositionUpdate	; jump to EndPositionUpdate to bypass reset
    377  f23a				   .ResetBomberPosition
    378  f23a		       20 bc f2 	      jsr	GetRandomBomberPos	; call subroutine for random x-position
    379  f23d				   .SetScoreValues
    380  f23d		       f8		      sed		; enable BCD(decimal) mode
    381  f23e		       a5 87		      lda	Timer
    382  f240		       18		      clc
    383  f241		       69 01		      adc	#1
    384  f243		       85 87		      sta	Timer	; add 1 to timer (BCD does not like INC instruction)
    385  f245		       d8		      cld		; disable BCD(decimal) mode
    386  f246				   EndPositionUpdate
    387  f246
    388  f246							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    389  f246							;; Check for object collision
    390  f246							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    391  f246				   CheckCollisionP0P1
    392  f246		       a9 80		      lda	#%10000000
    393  f248		       24 07		      bit	CXPPMM	; check CXPPMM bit 7 with the above pattern
    394  f24a		       d0 06		      bne	.P0P1Collided	; if collided, game over
    395  f24c		       20 94 f2 	      jsr	SetBackgroundColor
    396  f24f		       4c 55 f2 	      jmp	CheckCollisionM0P1	; else, skip to next check
    397  f252				   .P0P1Collided
    398  f252		       20 b1 f2 	      jsr	GameOver	; call GameOver subroutine
    399  f255
    400  f255				   CheckCollisionM0P1
    401  f255		       a9 80		      lda	#%10000000
    402  f257		       24 00		      bit	CXM0P
    403  f259		       d0 03		      bne	.M0P1Collided
    404  f25b		       4c 6b f2 	      jmp	EndCollisionCheck
    405  f25e				   .M0P1Collided
    406  f25e		       f8		      sed
    407  f25f		       a5 86		      lda	Score
    408  f261		       18		      clc
    409  f262		       69 01		      adc	#1
    410  f264		       85 86		      sta	Score
    411  f266		       d8		      cld		; increment score using BCD
    412  f267		       a9 00		      lda	#0
    413  f269		       85 85		      sta	MissileYPos
    414  f26b
    415  f26b				   EndCollisionCheck
    416  f26b		       85 2c		      sta	CXCLR	; clear all collision checks\
    417  f26d
    418  f26d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    419  f26d							;; Loop back to start a brand new frame
    420  f26d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    421  f26d		       4c 47 f0 	      jmp	StartFrame	; loop back to next frame
    422  f270
    423  f270							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    424  f270							;; Generate audio for the jet engine sound based on the jet Y-position
    425  f270							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    426  f270				   GenerateJetSound subroutine
    427  f270		       a9 01		      lda	#1
    428  f272		       85 19		      sta	AUDV0	; volume
    429  f274
    430  f274		       a5 81		      lda	JetYPos
    431  f276		       4a		      lsr
    432  f277		       4a		      lsr
    433  f278		       4a		      lsr		; divide position by 8
    434  f279		       85 88		      sta	Temp
    435  f27b		       a9 1f		      lda	#31
    436  f27d		       38		      sec
    437  f27e		       e5 88		      sbc	Temp
    438  f280		       85 17		      sta	AUDF0	; frequency
    439  f282
    440  f282		       a9 08		      lda	#8
    441  f284		       85 15		      sta	AUDC0	; control (tone)
    442  f286
    443  f286		       60		      rts
    444  f287
    445  f287							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    446  f287							;; Generate audio for missile
    447  f287							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    448  f287				   GenerateMissileSound subroutine
    449  f287		       a9 02		      lda	#2
    450  f289		       85 1a		      sta	AUDV1	; volume
    451  f28b
    452  f28b		       a9 0f		      lda	#15
    453  f28d		       85 18		      sta	AUDF1	; frequency
    454  f28f
    455  f28f		       a9 1f		      lda	#31
    456  f291		       85 16		      sta	AUDC1	; control (tone)
    457  f293
    458  f293		       60		      rts
    459  f294
    460  f294							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    461  f294							;; Set playfield and terrain color
    462  f294							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    463  f294				   SetBackgroundColor subroutine
    464  f294		       a9 c2		      lda	#$C2	; green
    465  f296		       85 99		      sta	TerrainColor
    466  f298		       a9 84		      lda	#$84	; blue
    467  f29a		       85 9a		      sta	RiverColor
    468  f29c		       60		      rts
    469  f29d
    470  f29d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    471  f29d							;; Subroutine to handle object horizontal position
    472  f29d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    473  f29d							;; A is the target x-coord position in pixels of our object
    474  f29d							;; Y is the object type (0:player, 1:bomber, 2:missle0, 3:missile1, 4:ball)
    475  f29d							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    476  f29d				   SetObjectXPos subroutine
    477  f29d		       85 02		      sta	WSYNC
    478  f29f		       38		      sec
    479  f2a0				   .Div15Loop
    480  f2a0		       e9 0f		      sbc	#15
    481  f2a2		       b0 fc		      bcs	.Div15Loop	; loop until carry-flag is clear
    482  f2a4		       49 07		      eor	#7
    483  f2a6		       0a		      asl
    484  f2a7		       0a		      asl
    485  f2a8		       0a		      asl
    486  f2a9		       0a		      asl		; four shift lefts to get only the top 4 bits
    487  f2aa		       99 20 00 	      sta	HMP0,Y	; store the fine offset to the correct HMxx
    488  f2ad		       99 10 00 	      sta	RESP0,Y	; fix object position in 15-step increment
    489  f2b0		       60		      rts
    490  f2b1
    491  f2b1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    492  f2b1							;; Game Over subroutine
    493  f2b1							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    494  f2b1				   GameOver   subroutine
    495  f2b1		       a9 30		      lda	#$30
    496  f2b3		       85 99		      sta	TerrainColor	; set terrain color to red
    497  f2b5		       85 9a		      sta	RiverColor	; set river color to red
    498  f2b7		       a9 00		      lda	#0
    499  f2b9		       85 86		      sta	Score	; Score = 0
    500  f2bb		       60		      rts
    501  f2bc
    502  f2bc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    503  f2bc							;; Subroutine to generate a Linear-Feedback Shift Resgistar random number
    504  f2bc							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    505  f2bc				   GetRandomBomberPos subroutine
    506  f2bc		       a5 96		      lda	Random
    507  f2be		       0a		      asl
    508  f2bf		       45 96		      eor	Random
    509  f2c1		       0a		      asl
    510  f2c2		       45 96		      eor	Random
    511  f2c4		       0a		      asl
    512  f2c5		       0a		      asl
    513  f2c6		       45 96		      eor	Random
    514  f2c8		       0a		      asl
    515  f2c9		       26 96		      rol	Random	; performs a series of shifts and bit operations
    516  f2cb		       4a		      lsr
    517  f2cc		       4a		      lsr		; divide the value by 4 with 2 right shifts
    518  f2cd		       85 82		      sta	BomberXPos
    519  f2cf		       a9 1e		      lda	#30
    520  f2d1		       65 82		      adc	BomberXPos
    521  f2d3		       85 82		      sta	BomberXPos
    522  f2d5
    523  f2d5		       a9 60		      lda	#96
    524  f2d7		       85 83		      sta	BomberYPos
    525  f2d9		       60		      rts
    526  f2da
    527  f2da							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    528  f2da							;; Subroutine to handle scoreboard digits to be displayed on the screen
    529  f2da							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    530  f2da							;; Convert the high and low nibbles of the variable Score and Timer
    531  f2da							;; into the offsets of digits lookup table so the values can be displayed.
    532  f2da							;; Each digit has a height of 5 bytes in the lookup table.
    533  f2da							;;
    534  f2da							;; For the low nibble we need to multiple by 5
    535  f2da							;;  - we can use left shitsf to perform multiplcation by 2
    536  f2da							;;  - for any number N, the value of N*5 = (N*2*2)+N
    537  f2da							;;
    538  f2da							;; For the upper nibble, since it's already times 16, we need to divide it
    539  f2da							;; and then multiply by 5.
    540  f2da							;;  - we can use right shifts to perform division by 2
    541  f2da							;;  - for any number N, the value of (N/16)*5 = (N/2/2)+(N/2/2/2/2)
    542  f2da							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    543  f2da				   CalculateDigitOffset subroutine
    544  f2da		       a2 01		      ldx	#1	; X register is the loop counter
    545  f2dc				   .PrepareScoreLoop		; this will loop twice, first X=1, and then X=0
    546  f2dc		       b5 86		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    547  f2de		       29 0f		      and	#$0F
    548  f2e0		       85 88		      sta	Temp	; save the value of A into Temp
    549  f2e2		       0a		      asl
    550  f2e3		       0a		      asl
    551  f2e4		       65 88		      adc	Temp
    552  f2e6		       95 89		      sta	OnesDigitOffset,X	; save A in OnesDigitOffset+1 or OnesDigitOffset+0
    553  f2e8
    554  f2e8		       b5 86		      lda	Score,X	; load A with Timer (X=1) or Score (X=0)
    555  f2ea		       29 f0		      and	#$F0	; remove the ones digit by masking 4 bits
    556  f2ec		       4a		      lsr		; N/2
    557  f2ed		       4a		      lsr		; N/4
    558  f2ee		       85 88		      sta	Temp	; Store into temp N/4
    559  f2f0		       4a		      lsr		; N/8
    560  f2f1		       4a		      lsr		; N/16
    561  f2f2		       65 88		      adc	Temp	; add N/16 with value in Temp(N/4)
    562  f2f4		       95 8b		      sta	TensDigitOffset,X	; save A in TensDigitOffset+1 or TensDigitOffset+0 
    563  f2f6
    564  f2f6		       ca		      dex
    565  f2f7		       10 e3		      bpl	.PrepareScoreLoop	; while X >= 0 loop again
    566  f2f9		       60		      rts
    567  f2fa
    568  f2fa							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    569  f2fa							;; Subroutine to to waste 12 cycles
    570  f2fa							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    571  f2fa							;; jsr takes 6 cycles
    572  f2fa							;; rts takes 6 cycles
    573  f2fa							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    574  f2fa				   Sleep12Cycles subroutine
    575  f2fa		       60		      rts
    576  f2fb
    577  f2fb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    578  f2fb							;; Declare ROM lookup tables
    579  f2fb							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    580  f2fb				   Digits
    581  f2fb		       77		      .byte.b	%01110111	; ### ###
    582  f2fc		       55		      .byte.b	%01010101	; # # # #
    583  f2fd		       55		      .byte.b	%01010101	; # # # #
    584  f2fe		       55		      .byte.b	%01010101	; # # # #
    585  f2ff		       77		      .byte.b	%01110111	; ### ###
    586  f300
    587  f300		       11		      .byte.b	%00010001	;   #	 #
    588  f301		       11		      .byte.b	%00010001	;   #	 #
    589  f302		       11		      .byte.b	%00010001	;   #	 #
    590  f303		       11		      .byte.b	%00010001	;   #	 #
    591  f304		       11		      .byte.b	%00010001	;   #	 #
    592  f305
    593  f305		       77		      .byte.b	%01110111	; ### ###
    594  f306		       11		      .byte.b	%00010001	;   #	 #
    595  f307		       77		      .byte.b	%01110111	; ### ###
    596  f308		       44		      .byte.b	%01000100	; #   #
    597  f309		       77		      .byte.b	%01110111	; ### ###
    598  f30a
    599  f30a		       77		      .byte.b	%01110111	; ### ###
    600  f30b		       11		      .byte.b	%00010001	;   #	 #
    601  f30c		       33		      .byte.b	%00110011	;  ##	##
    602  f30d		       11		      .byte.b	%00010001	;   #	 #
    603  f30e		       77		      .byte.b	%01110111	; ### ###
    604  f30f
    605  f30f		       55		      .byte.b	%01010101	; # # # #
    606  f310		       55		      .byte.b	%01010101	; # # # #
    607  f311		       77		      .byte.b	%01110111	; ### ###
    608  f312		       11		      .byte.b	%00010001	;   #	 #
    609  f313		       11		      .byte.b	%00010001	;   #	 #
    610  f314
    611  f314		       77		      .byte.b	%01110111	; ### ###
    612  f315		       44		      .byte.b	%01000100	; #   #
    613  f316		       77		      .byte.b	%01110111	; ### ###
    614  f317		       11		      .byte.b	%00010001	;   #	 #
    615  f318		       77		      .byte.b	%01110111	; ### ###
    616  f319
    617  f319		       77		      .byte.b	%01110111	; ### ###
    618  f31a		       44		      .byte.b	%01000100	; #   #
    619  f31b		       77		      .byte.b	%01110111	; ### ###
    620  f31c		       55		      .byte.b	%01010101	; # # # #
    621  f31d		       77		      .byte.b	%01110111	; ### ###
    622  f31e
    623  f31e		       77		      .byte.b	%01110111	; ### ###
    624  f31f		       11		      .byte.b	%00010001	;   #	 #
    625  f320		       11		      .byte.b	%00010001	;   #	 #
    626  f321		       11		      .byte.b	%00010001	;   #	 #
    627  f322		       11		      .byte.b	%00010001	;   #	 #
    628  f323
    629  f323		       77		      .byte.b	%01110111	; ### ###
    630  f324		       55		      .byte.b	%01010101	; # # # #
    631  f325		       77		      .byte.b	%01110111	; ### ###
    632  f326		       55		      .byte.b	%01010101	; # # # #
    633  f327		       77		      .byte.b	%01110111	; ### ###
    634  f328
    635  f328		       77		      .byte.b	%01110111	; ### ###
    636  f329		       55		      .byte.b	%01010101	; # # # #
    637  f32a		       77		      .byte.b	%01110111	; ### ###
    638  f32b		       11		      .byte.b	%00010001	;   #	 #
    639  f32c		       77		      .byte.b	%01110111	; ### ###
    640  f32d
    641  f32d		       22		      .byte.b	%00100010	;  #	#
    642  f32e		       55		      .byte.b	%01010101	; # # # #
    643  f32f		       77		      .byte.b	%01110111	; ### ###
    644  f330		       55		      .byte.b	%01010101	; # # # #
    645  f331		       55		      .byte.b	%01010101	; # # # #
    646  f332
    647  f332		       77		      .byte.b	%01110111	; ### ###
    648  f333		       55		      .byte.b	%01010101	; # # # #
    649  f334		       66		      .byte.b	%01100110	; ##  ##
    650  f335		       55		      .byte.b	%01010101	; # # # #
    651  f336		       77		      .byte.b	%01110111	; ### ###
    652  f337
    653  f337		       77		      .byte.b	%01110111	; ### ###
    654  f338		       44		      .byte.b	%01000100	; #   #
    655  f339		       44		      .byte.b	%01000100	; #   #
    656  f33a		       44		      .byte.b	%01000100	; #   #
    657  f33b		       77		      .byte.b	%01110111	; ### ###
    658  f33c
    659  f33c		       66		      .byte.b	%01100110	; ##  ##
    660  f33d		       55		      .byte.b	%01010101	; # # # #
    661  f33e		       55		      .byte.b	%01010101	; # # # #
    662  f33f		       55		      .byte.b	%01010101	; # # # #
    663  f340		       66		      .byte.b	%01100110	; ##  ##
    664  f341
    665  f341		       77		      .byte.b	%01110111	; ### ###
    666  f342		       44		      .byte.b	%01000100	; #   #
    667  f343		       77		      .byte.b	%01110111	; ### ###
    668  f344		       44		      .byte.b	%01000100	; #   #
    669  f345		       77		      .byte.b	%01110111	; ### ###
    670  f346
    671  f346		       77		      .byte.b	%01110111	; ### ###
    672  f347		       44		      .byte.b	%01000100	; #   #
    673  f348		       66		      .byte.b	%01100110	; ##  ##
    674  f349		       44		      .byte.b	%01000100	; #   #
    675  f34a		       44		      .byte.b	%01000100	; #   #
    676  f34b
    677  f34b				   JetSprite
    678  f34b		       00		      .byte.b	#%00000000	;
    679  f34c		       14		      .byte.b	#%00010100	;   # #
    680  f34d		       7f		      .byte.b	#%01111111	; #######
    681  f34e		       3e		      .byte.b	#%00111110	;  #####
    682  f34f		       1c		      .byte.b	#%00011100	;   ###
    683  f350		       1c		      .byte.b	#%00011100	;   ###
    684  f351		       08		      .byte.b	#%00001000	;    #
    685  f352		       08		      .byte.b	#%00001000	;    #
    686  f353		       08		      .byte.b	#%00001000	;    #
    687  f354
    688  f354				   JetSpriteTurn
    689  f354		       00		      .byte.b	#%00000000	;
    690  f355		       08		      .byte.b	#%00001000	;    #
    691  f356		       3e		      .byte.b	#%00111110	;  #####
    692  f357		       1c		      .byte.b	#%00011100	;   ###
    693  f358		       1c		      .byte.b	#%00011100	;   ###
    694  f359		       1c		      .byte.b	#%00011100	;   ###
    695  f35a		       08		      .byte.b	#%00001000	;    #
    696  f35b		       08		      .byte.b	#%00001000	;    #
    697  f35c		       08		      .byte.b	#%00001000	;    #
    698  f35d
    699  f35d				   BomberSprite
    700  f35d		       00		      .byte.b	#%00000000	;
    701  f35e		       08		      .byte.b	#%00001000	;    #
    702  f35f		       08		      .byte.b	#%00001000	;    #
    703  f360		       2a		      .byte.b	#%00101010	;  # # #
    704  f361		       3e		      .byte.b	#%00111110	;  #####
    705  f362		       7f		      .byte.b	#%01111111	; #######
    706  f363		       2a		      .byte.b	#%00101010	;  # # #
    707  f364		       08		      .byte.b	#%00001000	;    #
    708  f365		       1c		      .byte.b	#%00011100	;   ###
    709  f366
    710  f366				   JetColor
    711  f366		       00		      .byte.b	#$00
    712  f367		       fe		      .byte.b	#$FE
    713  f368		       0c		      .byte.b	#$0C
    714  f369		       0e		      .byte.b	#$0E
    715  f36a		       0e		      .byte.b	#$0E
    716  f36b		       04		      .byte.b	#$04
    717  f36c		       ba		      .byte.b	#$BA
    718  f36d		       0e		      .byte.b	#$0E
    719  f36e		       08		      .byte.b	#$08
    720  f36f
    721  f36f				   JetColorTurn
    722  f36f		       00		      .byte.b	#$00
    723  f370		       fe		      .byte.b	#$FE
    724  f371		       0c		      .byte.b	#$0C
    725  f372		       0e		      .byte.b	#$0E
    726  f373		       0e		      .byte.b	#$0E
    727  f374		       04		      .byte.b	#$04
    728  f375		       0e		      .byte.b	#$0E
    729  f376		       0e		      .byte.b	#$0E
    730  f377		       08		      .byte.b	#$08
    731  f378
    732  f378				   BomberColor
    733  f378		       00		      .byte.b	#$00
    734  f379		       32		      .byte.b	#$32
    735  f37a		       32		      .byte.b	#$32
    736  f37b		       0e		      .byte.b	#$0E
    737  f37c		       40		      .byte.b	#$40
    738  f37d		       40		      .byte.b	#$40
    739  f37e		       40		      .byte.b	#$40
    740  f37f		       40		      .byte.b	#$40
    741  f380		       40		      .byte.b	#$40
    742  f381
    743  f381							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    744  f381							;; Complete ROM size with exactly 4KB
    745  f381							;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    746  fffc					      org	$FFFC
    747  fffc		       00 f0		      word.w	Reset	; write 2 bytes with the program reset address
    748  fffe		       00 f0		      word.w	Reset	; write 2 bytes with the interruption vector
